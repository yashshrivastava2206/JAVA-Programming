/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
*/
class Solution {
    public List<String> letterCombinations(String digits) {
        LinkedList<String> list = new LinkedList<>();
        if(digits.length()==0)
        return list;
        list.add("");
        String[] map= {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        for(int i=0;i<digits.length();i++){
            int idx= Character.getNumericValue(digits.charAt(i));
            while(list.peek().length()==i){
                String str= list.remove();
                for(char ch : map[idx].toCharArray()){
                    list.add(str+ch);
                }
            }
        }
        return list;
    }
}
